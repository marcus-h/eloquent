import org.muml.eloquent.algorithm.ilp.neos.cplex.CPLEXBlackboxUnit;
import SolverConstants;

modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype cplexconfig uses config('http://www.muml.org/eloquent/algorithm/ilp/neos/cplex/config/1.0.0');

library CPLEX;

configuration property config : Dict(String, String);

helper cplexSolve(ilpModel : IntegerLinearProgram, inout solution : Dict(Variable, Integer)) : Integer {
	var completeSolution : Dict(String, Integer) := Dict{}; 
	var ret : Integer := solve(ilpModel, completeSolution, new CPLEXConfiguration(config));
	if (ret != SUCCESS()) then {
		return ret;
	} endif;
	var res : Dict(Variable, Integer) := Dict{};
	completeSolution->keys()->forEach(k) {
		solution->put(ilpModel.getVariable(k), completeSolution->get(k));
	};
	return SUCCESS();
}

query IntegerLinearProgram::getVariable(variableName : String) : Variable {
	return self.variables->any(name = variableName);
}

constructor CPLEXConfiguration::CPLEXConfiguration(config : Dict(String, String)) {
	email := config->get('email');
}