// automatically generated by Xtext
grammar de.uni_paderborn.fujaba.muml.allocation.language.AllocationSpecification with org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL

import "platform:/resource/de.uni_paderborn.fujaba.muml.allocation.language/model/language.ecore" as specification
//import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore"
//import "http://www.fujaba.de/muml/allocation/language/0.1.0" as specification 
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST" as ess


Specification returns specification::Specification:
	{specification::Specification}
	name=ID '{'
		(services += Service | constraints += Constraint)*
		measure=MeasureFunction 
	'}'
;
	/*'Specification'
	'{'
		//('annotation' '{' annotation+=EAnnotation ( "," annotation+=EAnnotation)* '}' )?
		//('extension' '{' extension+=core::Extension ( "," extension+=Extension)* '}' )?
	'}';*/


Service returns specification::Service:
	'service' name=ID '{'
		dimensions += QosDimension*
	'}'
;

QosDimension returns specification::QoSDimension:
	'qos' name=ID '{'
		'value' value=ValueTupleDescriptor';'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		'ocl' metric=ID ';'
	'}'
;

Constraint returns specification::Constraint:
	'constraint' (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
;

LocationConstraint returns specification::LocationConstraint:
	type=LocationConstraintType (name=ID)? '{'
		'descriptors' tupleDescriptors+=LocationTupleDescriptor (',' tupleDescriptors+=LocationTupleDescriptor)*';'
		'ocl' expression=Model';'
	'}'
;

ResourceConstraint returns specification::ResourceConstraint:
	'resource' (name=ID)? '{'
		'lhs' lhs=ValueTupleDescriptor';'
		'rhs' rhs=ValueTupleDescriptor';'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		//'ocl' expression=STRING';'
	'}'
;

RequiredHardwareResourceInstanceConstraint returns specification::RequiredHardwareResourceInstanceConstraint:
	'requiredHardwareResourceInstance' (name=ID)? '{'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		//'ocl' expression=STRING';'
	'}'
;


enum LocationConstraintType returns specification::LocationConstraintTypes:
	SAME_LOCATION='sameLocation' | DIFFERENT_LOCATION='differentLocation'
;

LocationTupleDescriptor returns specification::LocationTupleDescriptor:
	'(' instance=ID ',' instances=ID ')'
;

ValueTupleDescriptor returns specification::ValueTupleDescriptor:
	value=ID
;

ComponentResourceTupleDescriptor returns specification::ComponentResourceTupleDescriptor:
	'(' instance=ID ',' hwresinstance=ID ')'
;

MeasureFunction returns specification::MeasureFunction:
	'measure' services+=[specification::Service] ('+' services+=[specification::Service])*';'
;

/*
EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';
*/
//EString returns ecore::EString:
	//STRING | ID;

/*EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;
*/