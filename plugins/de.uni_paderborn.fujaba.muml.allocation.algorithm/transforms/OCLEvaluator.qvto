import de.uni_paderborn.fujaba.muml.allocation.algorithm.ocl.OCLEvaluatorBlackboxUnit;

modeltype context uses context('http://www.fujaba.de/muml/allocation/language/0.1.0/context');
modeltype instance uses muml::instance('http://www.fujaba.de/muml/instance/0.4.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.fujaba.de/muml/hardware/hwplatforminstance/1.0/');
modeltype allocationSpecification uses cs('http://www.fujaba.de/muml/allocation/language/0.1.0/cs');
modeltype ocl uses essentialoclcs('http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST');
modeltype values uses values('http://ww.eclipse.org/OCL/Values');

library OCLEvaluator;

//blackbox query evaluate(oclExpression : ContextCS, contextObject : OclAny) : OclAny;
//blackbox query evaluateLocationConstraintCS(oclExpression : ContextCS, contextObject : OclAny) : OrderedSet(TupleValue);

query evaluateOCL(oclExpression : ContextCS, contextObject : OclAny) : OclAny {
	return evaluate(oclExpression, contextObject);
}

helper LocationConstraintCS::evaluateOCL(contextObject : OclAny) : Sequence(TupleValue) {
	//return evaluateOCL(oclExpression, contextObject).oclAsType(OrderedSet(OclAny));
	//var res : Sequence(TupleValue) := evaluateLocationConstraintCS(self, contextObject);
	var res : Sequence(TupleValue) := evaluateConstraintCS(self, contextObject);
	res->createTraceHelper(self);
	return res;
}

helper RequiredHardwareResourceInstanceConstraintCS::evaluateOCL(contextObject : OclAny) : Sequence(TupleValue) {
	var res : Sequence(TupleValue) := evaluateConstraintCS(self, contextObject);
	res->createTraceHelper(self);
	return res;
}

helper TupleValue::createTraceHelper(cs : LocationConstraintCS) {
	cs.map createTrace(self);
	return null;
}

mapping LocationConstraintCS::createTrace(tv : TupleValue) : TupleValue {
	init {
		result := tv;
		log("create trace (location) called");
	}
}

helper TupleValue::createTraceHelper(cs : RequiredHardwareResourceInstanceConstraintCS) {
	cs.map createTrace(self);
	return null;
}

mapping RequiredHardwareResourceInstanceConstraintCS::createTrace(tv : TupleValue) : TupleValue {
	init {
		result := tv;
		log("create trace (hwresinstance) called");
	}
}

helper createOCLContext(cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) : OCLContext {
	log('createOCLContextObject');
	return map createOCLContextObject(cic, hpic);
}

mapping createOCLContextObject(cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) : OCLContext {
	componentInstanceConfiguration := cic;
	hardwarePlatformInstanceConfiguration := hpic;	
}