import Util;

modeltype core uses core('http://www.storydriven.org/core/0.3.1');
modeltype ilptype uses ilp('http://www.fujaba.de/muml/allocation/ilp/0.1.0');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/expressions/0.3.1');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/expressions/common/0.3.1');
modeltype instance uses muml::instance('http://www.fujaba.de/muml/instance/0.4.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.fujaba.de/muml/hardware/hwplatforminstance/1.0/');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.fujaba.de/muml/hardware/hwresourceinstance/1.0/');

library VariableHelper;

query Sequence(NamedElement)::getVariableName() : String {
	return '_'.join(self->collect(getVariableName()));
}

query NamedElement::getVariableName() : String {
	// fail in order to detect potential errors
	assert fatal (false) with log("implement me");
	return '';
}

query ComponentInstance::getVariableName() : String {
	return '.'.join(self.getParentComponents()->collect(name));
}

query ComponentInstance::getParentComponents() : OrderedSet(ComponentInstance) {
	return self->asOrderedSet()->closure(ci : ComponentInstance |
		let sci : StructuredComponentInstance = ci.parentCIC.parentStructuredComponentInstance
		in
		if sci.oclIsUndefined() then
			ci->asOrderedSet()
		else
			OrderedSet{ci, sci}
		endif
	)->reverse()->collect(oclAsType(ComponentInstance))->asOrderedSet();
}

query ResourceInstance::getVariableName() : String {
	return self.name;
}

query Sequence(NamedElement)::getVariable() : Variable {
	return Sequence{self}.resolveone(Variable);
}