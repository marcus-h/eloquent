/**
 * generated by Xtext 2.11.0
 */
package de.fraunhofer.iem.formatting2;

import com.google.inject.Inject;
import de.fraunhofer.iem.projectPlanning.Assignment;
import de.fraunhofer.iem.projectPlanning.Capability;
import de.fraunhofer.iem.projectPlanning.Employee;
import de.fraunhofer.iem.projectPlanning.Project;
import de.fraunhofer.iem.projectPlanning.ProjectPlan;
import de.fraunhofer.iem.projectPlanning.Rating;
import de.fraunhofer.iem.services.ProjectPlanningGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class ProjectPlanningFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ProjectPlanningGrammarAccess _projectPlanningGrammarAccess;
  
  protected void _format(final ProjectPlan projectPlan, @Extension final IFormattableDocument document) {
    EList<Capability> _capabilities = projectPlan.getCapabilities();
    for (final Capability capability : _capabilities) {
      document.<Capability>format(capability);
    }
    EList<Employee> _employees = projectPlan.getEmployees();
    for (final Employee employee : _employees) {
      document.<Employee>format(employee);
    }
    EList<Project> _projects = projectPlan.getProjects();
    for (final Project project : _projects) {
      document.<Project>format(project);
    }
    EList<Rating> _ratings = projectPlan.getRatings();
    for (final Rating rating : _ratings) {
      document.<Rating>format(rating);
    }
    EList<Assignment> _assignments = projectPlan.getAssignments();
    for (final Assignment assignment : _assignments) {
      document.<Assignment>format(assignment);
    }
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(projectPlan);
    ISemanticRegion _keyword = _regionFor.keyword("capabilities:");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(projectPlan);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("employees:");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(projectPlan);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("projects:");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_2, _function_2);
  }
  
  protected void _format(final Assignment assignment, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(assignment);
    ISemanticRegion _keyword = _regionFor.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function);
  }
  
  protected void _format(final Project project, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Project>interior(project, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(project);
    ISemanticRegion _keyword = _regionFor.keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(project);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(project);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("requiresResources:");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(project);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("requiresCapabilities:");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_4);
  }
  
  protected void _format(final Employee employee, @Extension final IFormattableDocument document) {
    EList<Rating> _ratings = employee.getRatings();
    for (final Rating rating : _ratings) {
      document.<Rating>format(rating);
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Employee>interior(employee, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(employee);
    ISemanticRegion _keyword = _regionFor.keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(employee);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(employee);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("ratesCapabilities:");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(employee);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("hasCapabilities:");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(employee);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("hasResources:");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_4, _function_5);
  }
  
  protected void _format(final Rating rating, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(rating);
    ISemanticRegion _keyword = _regionFor.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function);
  }
  
  protected void _format(final Capability capability, @Extension final IFormattableDocument document) {
  }
  
  public void format(final Object assignment, final IFormattableDocument document) {
    if (assignment instanceof XtextResource) {
      _format((XtextResource)assignment, document);
      return;
    } else if (assignment instanceof Assignment) {
      _format((Assignment)assignment, document);
      return;
    } else if (assignment instanceof Capability) {
      _format((Capability)assignment, document);
      return;
    } else if (assignment instanceof Employee) {
      _format((Employee)assignment, document);
      return;
    } else if (assignment instanceof Project) {
      _format((Project)assignment, document);
      return;
    } else if (assignment instanceof ProjectPlan) {
      _format((ProjectPlan)assignment, document);
      return;
    } else if (assignment instanceof Rating) {
      _format((Rating)assignment, document);
      return;
    } else if (assignment instanceof EObject) {
      _format((EObject)assignment, document);
      return;
    } else if (assignment == null) {
      _format((Void)null, document);
      return;
    } else if (assignment != null) {
      _format(assignment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(assignment, document).toString());
    }
  }
}
